version: '3'
services:
  redis:
    image: redis:5.0.7
    networks:
      - "internal"
    restart: always

  db:
    image: postgres:12.1
    restart: always
    ports:
      - "5432:5432"
    networks: 
      - "internal"
    env_file:
      - generated/postgres_password
      - generated/selene_postgres_password
    volumes:
    - ./postgres_setup:/docker-entrypoint-initdb.d
    command:
      - -c
      - "listen_addresses=*"

  db_setup:
    image: selene-backend
    build:
      context: ./selene-backend
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
    restart: "on-failure"
    depends_on:
      - db
    networks: 
      - "internal"
    volumes:
    - shared:/shared
    command:
      - bash
      - -c
      - "if [ -f /shared/db_bootstrap_done ]; then echo 'DB already set up.'; exit 0; fi;
         set -xe && sleep 10 && cd /opt/selene/selene-backend/db/scripts && pipenv run python -u bootstrap_mycroft_db.py && touch /shared/db_bootstrap_done
        "
      # TODO: Get rid of the sleep above. Open a PR to make the bootstrap script to retry if it fails to connect
      # The postgres image restart itself after running init scripts and this script looses the connection
      # and can't recover.
    env_file:
      - generated/postgres_password
      - generated/selene_postgres_password
    environment:
      DB_HOST: ${DB_HOST:-db}

  db_wakeword_setup:
    image: postgres:12.1
    restart: "on-failure"
    networks: 
      - "internal"
    depends_on:
      - db
      - db_setup
    env_file:
      - generated/selene_postgres_password
    volumes:
        - "./wakewords:/setup"
        - "shared:/shared"
    command:
      - bash
      - -c
      - "while [ ! -f /shared/db_bootstrap_done ]; do echo 'Waiting for Database bootstrapping...'; sleep 1; done;
         if [ -f /shared/wakeword_setup_done ]; then echo 'Wakeword setup already done.'; exit 0; fi;
         /setup/setup.sh && touch /shared/wakeword_setup_done
        "

  skills_setup:
    image: selene-backend
    build:
      context: ./selene-backend
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
    restart: "on-failure"
    volumes:
    - shared:/shared
    networks: 
      - "internal"
    depends_on:
      - db
      - db_setup
    command:
      - bash
      - -c
      - "while [ ! -f /shared/db_bootstrap_done ]; do echo 'Waiting for Database bootstrapping...'; sleep 1; done;
         if [ -f /shared/skills_setup_done ]; then echo 'Skills setup already done.'; exit 0; fi;
         cd /opt/selene/selene-backend/batch && /usr/local/bin/pipenv install &&  pipenv run python script/load_skill_display_data.py --core-version 19.08 && touch /shared/skills_setup_done
        "
        # TODO: core-version shouldn't be hardcoded (get latest somehow?)
    env_file:
      - generated/selene_postgres_password
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_NAME: ${DB_NAME:-mycroft}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-selene}
      GITHUB_USER: ${GITHUB_USER}
      GITHUB_PASSWORD: ${GITHUB_PASSWORD}

  sso:
    image: selene-backend
    build:
      context: ./selene-backend
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
    restart: "on-failure"
    depends_on:
      - db
      - skills_setup
      - db_setup
    volumes:
    - shared:/shared
    networks: 
      - "internal"
      - "web"
    command:
      - bash
      - -c
      - "while [ ! -f /shared/db_bootstrap_done ]; do echo 'Waiting for Database bootstrapping...'; sleep 1; done;
         cd /opt/selene/selene-backend/api/sso && /usr/local/bin/pipenv run uwsgi --ini uwsgi.ini
        "
    env_file:
      - generated/selene_postgres_password
      - generated/jwt_access_secret
      - generated/jwt_refresh_secret
      - generated/jwt_reset_secret
      - generated/encryption_salt
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_NAME: ${DB_NAME:-mycroft}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-selene}
      SSO_BASE_URL: ${SSO_BASE_URL}
      SELENE_ENVIRONMENT: ${SELENE_ENVIRONMENT:-prod}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}

  account:
    image: selene-backend
    build:
      context: ./selene-backend
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
    restart: "on-failure"
    depends_on:
      - db
      - skills_setup
      - db_setup
    volumes:
    - shared:/shared
    networks: 
      - "internal"
      - "web"
    command:
      - bash
      - -c
      - "while [ ! -f /shared/db_bootstrap_done ]; do echo 'Waiting for Database bootstrapping...'; sleep 1; done;
         cd /opt/selene/selene-backend/api/account && /usr/local/bin/pipenv run uwsgi --ini uwsgi.ini
        "
    env_file:
      - generated/selene_postgres_password
      - generated/jwt_access_secret
      - generated/jwt_refresh_secret
      - generated/encryption_salt
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_NAME: ${DB_NAME:-mycroft}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-selene}
      OAUTH_BASE_URL: ${OAUTH_BASE_URL}
      SELENE_ENVIRONMENT: ${SELENE_ENVIRONMENT:-prod}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}

  market:
    image: selene-backend
    build:
      context: ./selene-backend
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
    restart: "on-failure"
    depends_on:
      - db
      - skills_setup
      - db_setup
    volumes:
    - shared:/shared
    networks: 
      - "internal"
      - "web"
    command:
      - bash
      - -c
      - "while [ ! -f /shared/skills_setup_done ]; do echo 'Waiting for Skills setup...'; sleep 1; done;
         cd /opt/selene/selene-backend/api/market && /usr/local/bin/pipenv run uwsgi --ini uwsgi.ini
        "
    env_file:
      - generated/selene_postgres_password
      - generated/jwt_access_secret
      - generated/jwt_refresh_secret
      - generated/encryption_salt
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_NAME: ${DB_NAME:-mycroft}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-selene}
      OAUTH_BASE_URL: ${OAUTH_BASE_URL}
      SELENE_ENVIRONMENT: ${SELENE_ENVIRONMENT:-prod}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}

  devices:
    image: selene-backend
    build:
      context: ./selene-backend
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
    restart: "on-failure"
    depends_on:
      - db
      - skills_setup
      - db_setup
    volumes:
    - shared:/shared
    networks: 
      - "internal"
      - "web"
    command:
      - bash
      - -c
      - "while [ ! -f /shared/skills_setup_done ]; do echo 'Waiting for Skills setup...'; sleep 1; done;
         cd /opt/selene/selene-backend/api/public && /usr/local/bin/pipenv run uwsgi --ini uwsgi.ini
        "
    env_file:
      - generated/selene_postgres_password
      - generated/jwt_access_secret
      - generated/jwt_refresh_secret
      - generated/encryption_salt
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_NAME: ${DB_NAME:-mycroft}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-selene}
      OAUTH_BASE_URL: ${SSO_BASE_URL}
      SELENE_ENVIRONMENT: ${SELENE_ENVIRONMENT:-prod}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      EMAIL_SERVICE_HOST: ${EMAIL_SERVICE_HOST}
      EMAIL_SERVICE_PORT: ${EMAIL_SERVICE_PORT}
      EMAIL_SERVICE_USER: ${EMAIL_SERVICE_USER}
      EMAIL_SERVICE_PASSWORD: ${EMAIL_SERVICE_PASSWORD}
      GOOGLE_STT_KEY: ${GOOGLE_STT_KEY}
      OWM_KEY: ${OWM_KEY}
      OWM_URL: ${OWM_URL:-https://api.openweathermap.org/data/2.5}
      WOLFRAM_ALPHA_KEY: ${WOLFRAM_ALPHA_KEY}
      WOLFRAM_ALPHA_URL: ${WOLFRAM_ALPHA_URL:-https://api.wolframalpha.com}

  deepspeech:
    image: deepspeech
    ports:
      - "8080:8080"
    build:
      context: ./deepspeech 
    networks: 
      - "web" 
    restart: "on-failure"
    expose:
      - "8080"

  mozilla-tts:
    build:
      context: ./mozilla-tts 
    image: mozilla-tts
    networks: 
      - "web"
    restart: "on-failure"
    expose:
      - "5002"

  selene-ui-market:
    build:
      context: ./selene-ui
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
        application_name: "market"
    image: selene-ui-market
    depends_on:
      - market
    networks: 
      - "web"
    restart: "on-failure"

  selene-ui-account:
    build:
      context: ./selene-ui
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
        application_name: "account"
    image: selene-ui-account
    depends_on:
      - account
    networks: 
      - "web"
    restart: "on-failure"

  selene-ui-sso:
    build:
      context: ./selene-ui
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
        application_name: "sso"
    image: selene-ui-sso
    depends_on:
      - sso
    networks: 
      - "web"
    restart: "on-failure"

  # This is and nginx reverse proxy that redirects all subdomains and api
  # endpoints to the correct container.
  selene-ui-proxy:
    build:
      context: selene-ui
      dockerfile: nginxproxy-Dockerfile
      args:
        mycroft_domain: "${MYCROFT_DOMAIN}"
    image: mycroft-nginx-proxy
    restart: "on-failure"
    networks: 
      - "web"
    depends_on:
      - market
      - sso
      - account
      - devices
      - selene-ui-market
      - selene-ui-sso
      - selene-ui-account
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - shared:/shared
    command:
        - bash
        - -c
        - "while [ ! -f /shared/skills_setup_done ]; do echo 'Waiting for Skills setup...'; sleep 1; done;
           while [ ! -f /shared/db_bootstrap_done ]; do echo 'Waiting for Database bootstrapping...'; sleep 1; done;
           wait-for-it sso:5000;
           wait-for-it account:5000;
           wait-for-it market:5000;
           wait-for-it devices:5000;
           wait-for-it selene-ui-market:80;
           wait-for-it selene-ui-account:80;
           wait-for-it selene-ui-sso:80;
           nginx -g 'daemon off;'
          "

networks:
  internal:
  web:
volumes:
  shared:
